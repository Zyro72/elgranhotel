/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Entidades.habitacion;
import Entidades.huesped;
import Entidades.reserva;
import accesoAdatos.habitacionData;
import accesoAdatos.reservaData;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import accesoAdatos.Conexion;
import accesoAdatos.huespedData;
import java.sql.Connection;
/**
 *
 * @author perey
 */
public class ListarHabitacionesOcupadas extends javax.swing.JInternalFrame {
    DefaultTableModel formatoHabitacionesReservadas=new DefaultTableModel();
    reservaData resData=new reservaData();
    habitacionData habData=new habitacionData();
    huespedData huesData=new huespedData();
    private Connection con=null;
         /**
     * Creates new form ListarHabitaciones
     */
    public ListarHabitacionesOcupadas() {
        this.formatoHabitacionesReservadas=new DefaultTableModel(){
            public boolean isCellEditable(int fila,int columna){
                return false;
            }
        };
        initComponents();
        con=Conexion.getConection();
        inicializoTabla();
        cargoDatos();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jBsalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaHabitaciones = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        jBsalir.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jBsalir.setText("Salir");
        jBsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsalirActionPerformed(evt);
            }
        });

        jTablaHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTablaHabitaciones);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Listado completo de Habitaciones Ocupadas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jBsalir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBsalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsalirActionPerformed
    this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jBsalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBsalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablaHabitaciones;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

public void inicializoTabla(){
    formatoHabitacionesReservadas.addColumn("Numero");
    formatoHabitacionesReservadas.addColumn("Tipo");
    formatoHabitacionesReservadas.addColumn("Dni Huesped");
    formatoHabitacionesReservadas.addColumn("Apellido y nombre");
    formatoHabitacionesReservadas.addColumn("Cantidad Noches");
    formatoHabitacionesReservadas.addColumn("Fecha Salida");
    jTablaHabitaciones.setModel(formatoHabitacionesReservadas);
    
    
}
public void cargoDatos(){
    formatoHabitacionesReservadas.setRowCount(0);
    LocalDate fechaActual=LocalDate.now();
    Date fechaSql=Date.valueOf(fechaActual);
    reserva reservaParaLista= new reserva();
    //huesped auxhuesped=new huesped();
    //habitacion auxnhab= new habitacion();
    String sql="SELECT * FROM reserva WHERE Estado=true AND ? BETWEEN FechaEntrada AND FechaSalida ";
    
        try {
            PreparedStatement ps=con.prepareStatement(sql);
            ps.setDate(1, fechaSql);
            ResultSet rs=ps.executeQuery();
            
            while(rs.next()){
                huesped auxhuesped=new huesped();
                habitacion auxnhab= new habitacion();
                 int auxnum;
                 int estadia;
                 int auxhuespedId;
                 int auxIdreserva;
                 double auxImporte;
//                 auxhuesped=null;
//                 auxnhab=null;
                 //reservaParaLista=null;
                 auxIdreserva=rs.getInt(1);
                 
                 auxImporte=rs.getDouble(6);
                 
                 auxnum=rs.getInt(2);
                 auxnhab=habData.buscarHabitacion(auxnum);
                 auxhuespedId=rs.getInt(3);
                 auxhuesped=huesData.buscarporId(auxhuespedId);
                 LocalDate entrada=rs.getDate("FechaEntrada").toLocalDate();//.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                 LocalDate salida=rs.getDate("FechaSalida").toLocalDate();//.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                 reservaParaLista.setIdReserva(auxIdreserva);
                 reservaParaLista.setNrohabitacion(auxnhab);
                 reservaParaLista.setIdHuesped(auxhuesped);
                 reservaParaLista.setFechaEntrada(entrada);
                 reservaParaLista.setFechaSalida(salida);
                 reservaParaLista.setImporteTotal(auxImporte);
                 estadia=(int) ChronoUnit.DAYS.between(reservaParaLista.getFechaEntrada(),reservaParaLista.getFechaSalida());
                 formatoHabitacionesReservadas.addRow(new Object[]{reservaParaLista.getNrohabitacion().getNumero(),reservaParaLista.getNrohabitacion().getTipohabitacion().getTipo(),reservaParaLista.getIdHuesped().getDni(),reservaParaLista.getIdHuesped().getApellidoynom(),estadia, reservaParaLista.getFechaSalida()});             
             
             }
            
            
            
                 }catch (SQLException ex) {
            Logger.getLogger(reservaData.class.getName()).log(Level.SEVERE, null, ex);
        
        }
    
}
}   



    
  
