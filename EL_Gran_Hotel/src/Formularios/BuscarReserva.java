/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Entidades.habitacion;
import Entidades.huesped;
import Entidades.reserva;
import Entidades.tipodehabitacion;
import accesoAdatos.habitacionData;
import accesoAdatos.huespedData;
import accesoAdatos.reservaData;
import accesoAdatos.tipohabitaciondata;
import java.awt.Color;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author perey
 */
public class BuscarReserva extends javax.swing.JInternalFrame {
    DefaultTableModel formatoTablaTipos =new DefaultTableModel();
    DefaultTableModel formatoTablaHabs=new DefaultTableModel();
    DefaultTableModel formatoTablaReserva=new DefaultTableModel();
    habitacionData habData=new habitacionData();
    huespedData huesData=new huespedData();
    tipohabitaciondata tipohData=new tipohabitaciondata();
    reservaData resData=new reservaData();
    double importe;
    LocalDate fechaIng;
    LocalDate fechaSal;
    habitacion habitReserva=new habitacion();
    reserva reservaElegida=new reserva();
    reserva modiReserva=new reserva();
    huesped huespedReserva=new huesped();
    DateTimeFormatter formatoFecha=DateTimeFormatter.ofPattern("dd/MM/yyyy");
    String stHuesped;
    boolean fechaVerificada;
    double precioTipoReserva;
    
          
   
    /**
     * Creates new form BuscarReserva
     */
    public BuscarReserva() {
        initComponents();
        jBcancelarReserva.setBackground(Color.RED);
        jBcancelarReserva.setForeground(Color.WHITE);
        inicializarTablas();
        
       
        
        
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTdni = new javax.swing.JTextField();
        jBbuscarReservas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaReservas = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTdiaE = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTmesE = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTanoE = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTdiaS = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTmesS = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTanoS = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTtiposHabitacion = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jThabitaciones = new javax.swing.JTable();
        jBvalidar = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jTcantNoches = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTimporte = new javax.swing.JTextField();
        jBguardarCambiosReserva = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTcantPas = new javax.swing.JTextField();
        jBbuscar = new javax.swing.JButton();
        jBcancelarReserva = new javax.swing.JButton();

        jBSalir.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Ingrese Dni del huésped:");

        jBbuscarReservas.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBbuscarReservas.setText("Buscar Reservas");
        jBbuscarReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbuscarReservasActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel2.setText("Reservas Activas, Seleccione para Ver/Modificar o Cancelar");

        jTablaReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTablaReservas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaReservasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablaReservas);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Fecha de Entrada:");

        jLabel12.setText("  dd        mm          aaaa");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("/");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("/");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Fecha de Salida");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("/");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("/");

        jLabel13.setText("  dd        mm          aaaa");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel9.setText("Elija el tipo de habitacion deseada");

        jTtiposHabitacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTtiposHabitacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTtiposHabitacionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTtiposHabitacion);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel10.setText("Elija la habtacion deseada y haga click en confimar Reserva");

        jThabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jThabitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jThabitacionesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jThabitaciones);

        jBvalidar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBvalidar.setText("Valida Fechas");
        jBvalidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBvalidarActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setText("Cantidad de Noches:");

        jTcantNoches.setEditable(false);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setText("Importe total de la estadía: $");

        jTimporte.setEditable(false);

        jBguardarCambiosReserva.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBguardarCambiosReserva.setText("Guardar Cambios");
        jBguardarCambiosReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBguardarCambiosReservaActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setText("Ingrese Cantidad de Huéspedes");

        jBbuscar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBbuscar.setText("Buscar");
        jBbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbuscarActionPerformed(evt);
            }
        });

        jBcancelarReserva.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jBcancelarReserva.setText("CANCELAR RESERVA");
        jBcancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBcancelarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jTcantPas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBbuscar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTdiaE, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTmesE, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTanoE, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTdiaS, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTmesS, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTanoS, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBvalidar)
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTcantNoches, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(0, 102, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBguardarCambiosReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTdni, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBbuscarReservas)
                                        .addGap(280, 280, 280))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTimporte, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBcancelarReserva))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTdni, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBbuscarReservas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBcancelarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTdiaE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTmesE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTanoE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTdiaS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTmesS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTanoS, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addComponent(jBvalidar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTcantNoches, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTcantPas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTimporte, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBguardarCambiosReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jTtiposHabitacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTtiposHabitacionMouseClicked
        formatoTablaHabs.setNumRows(0);

        boolean verifico;
        int filaSeleccionada=jTtiposHabitacion.getSelectedRow();
        int codigo=(Integer) formatoTablaTipos.getValueAt(filaSeleccionada,0);

        importe=(Double) formatoTablaTipos.getValueAt(filaSeleccionada,5);
        try{
            importe=importe*Integer.parseInt(jTcantNoches.getText());
            jTimporte.setText(String.valueOf(importe));

        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Debe completar y validar las fechas");
            return;
        }

        ArrayList<habitacion> habitacionesTipo=new ArrayList<>();
        habitacionesTipo=habData.listarHabitacionesTipo(codigo);

        for(habitacion hab:habitacionesTipo){
            //Busco las habitaciones en la BD de reserva para ver si estan ocupada en esa fecha
            verifico=resData.verificarDisponible(hab.getNumero(),fechaIng);
            if(verifico==false){
                //verifico el estado de la habitacion y no agrego si esta en False
                boolean estadoHabit=hab.isEstado();
                if(estadoHabit==true){
                    formatoTablaHabs.addRow(new Object[]{hab.getNumero(),hab.getTipohabitacion().getTipo(),hab.getPiso()});
                

            }
       }
    }//GEN-LAST:event_jTtiposHabitacionMouseClicked
    }
    private void jThabitacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jThabitacionesMouseClicked
        int filaSeleccionada=jThabitaciones.getSelectedRow();
        int numeroBuscar=(Integer) formatoTablaHabs.getValueAt(filaSeleccionada,0);
        habitReserva=habData.buscarHabitacion(numeroBuscar);

    }//GEN-LAST:event_jThabitacionesMouseClicked

    private void jBvalidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBvalidarActionPerformed
        fechaVerificada=verificoFechas();
        
    }//GEN-LAST:event_jBvalidarActionPerformed

    private void jBguardarCambiosReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBguardarCambiosReservaActionPerformed
        
        
        //Validaciones Varias
        int filaseleccionadaRes=jTablaReservas.getSelectedRow();
        int filaseleccionadaHab=jThabitaciones.getSelectedRow();
        String noches=jTcantNoches.getText();
        if (filaseleccionadaRes<0){
            JOptionPane.showMessageDialog(this,"Debe Elegir una reserva");
            return;
        }
        if(noches.isEmpty()){
            JOptionPane.showMessageDialog(this,"Revise las fechas y haga click en el botón Verificar ");
            return;
        }
        
        
        if (fechaVerificada==false){
            return;
        }
        if (filaseleccionadaHab<0){
            JOptionPane.showMessageDialog(this,"Por favor haga click en la habitación para continuar...");
            return;
        }
        modiReserva.setIdReserva(reservaElegida.getIdReserva());
        modiReserva.setNrohabitacion(habitReserva);
        modiReserva.setIdHuesped(huespedReserva);
        modiReserva.setFechaEntrada(fechaIng);
        modiReserva.setFechaSalida(fechaSal);
        modiReserva.setImporteTotal(importe);
        modiReserva.setEstado(true);
        resData.modificarReserva(modiReserva);
        limpioform();

    }//GEN-LAST:event_jBguardarCambiosReservaActionPerformed

    private void jBbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbuscarActionPerformed
        int cantPas=0;
        formatoTablaHabs.setRowCount(0);
        //VALIDACION DE CANTIDAD DE PASAJEROS, MAYOR A 0, ADVERTENCIA DE MAS DE 3 Y VALIDACION DE QUE SEA NUMERO
        try{
            cantPas=Integer.parseInt(jTcantPas.getText());
            if(cantPas>3){
                JOptionPane.showMessageDialog(this,"El maximo por habitacion es 3 personas. Ingrese 3 y reserve mas habitaciones");
                jTcantPas.setText("");
                return;
            }
            if(cantPas<1){
                JOptionPane.showMessageDialog(this,"Debe ingresar un valor mayor a 0");
                jTcantPas.setText("");
                return;
            }

        }catch(NumberFormatException ex)   {
            JOptionPane.showMessageDialog(this,"Debe ingresar una cantidad valida");
            return;
        }
        //-----------------------------------------------------------------------------------------------

        //limpio la tabla
        formatoTablaTipos.setNumRows(0);
        //inicializarTablas();

        //Relleno la tabla con los tipos de habitaciones que cumplan la condicion

        ArrayList<tipodehabitacion> tiposdeH=new ArrayList<>();
        tiposdeH=tipohData.todoslostipos();

        for(tipodehabitacion tipo:tiposdeH){
            if(tipo.getCapacidad()>=cantPas){
                formatoTablaTipos.addRow(new Object[]{tipo.getCodigo(),tipo.getTipo(),tipo.getCapacidad(),tipo.getCantcamas(),tipo.getTipocamas(),tipo.getPrecio()});

            }

        }

    }//GEN-LAST:event_jBbuscarActionPerformed

    private void jBcancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBcancelarReservaActionPerformed
        // Validaciones
        
        stHuesped=jTdni.getText();
        if(stHuesped.isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI y elegir una reserva para cancelar...");
            return;
            
            
        }
        int filaSeleccionada=jTablaReservas.getSelectedRow();
        
        if(filaSeleccionada<0){
            JOptionPane.showMessageDialog(this,"Debe seleccionar alguna reserva para cancelar...");
            return;
        }
        int respuesta=JOptionPane.showConfirmDialog(this,"ESTA SEGURO? ESTA ACCION NO SE PODRÁ REVERTIR", "ADVERTENCIA" + reservaElegida.getIdReserva(),JOptionPane.YES_NO_OPTION );
            if (respuesta==JOptionPane.YES_OPTION){
                resData.cancelarReserva(reservaElegida.getIdReserva());
            } 
            limpioform();
            
    }//GEN-LAST:event_jBcancelarReservaActionPerformed

    private void jBbuscarReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbuscarReservasActionPerformed
        //busco el huesped x DNI
        int dniHuesped;
          stHuesped=jTdni.getText();
        if(stHuesped.isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI...");
            return;
            
            
        }
        
        
        String fechaEntradaFormateada;
        String fechaSalidaFormateada;
          
        try{
            dniHuesped=Integer.parseInt(jTdni.getText());
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"Debe ingresar un DNI válido");
            jTdni.setText("");
            return;
        }
        
        huespedReserva=huesData.buscarporDni(dniHuesped);
        if(huespedReserva==null){
        jTdni.setText("");
            return;
        }
        //Muestro el apellido y nombre para que el usuario confirme
        int respuesta=JOptionPane.showConfirmDialog(this,"El DNI elegido Corresponde a: //" + huespedReserva.getApellidoynom() + " //, Confirma?" , "Revise y confirme los datos" , JOptionPane.YES_NO_OPTION);
        
            if (respuesta==JOptionPane.NO_OPTION){
                jTdni.setText("");
                return;
            }
        
        
               
        //busco las reservas del huesped
        formatoTablaHabs.setRowCount(0);
        ArrayList<reserva> reservasHuesped=new ArrayList<>();
        reservasHuesped=resData.buscarreservaxhuesped2(huespedReserva);
        
        if(reservasHuesped.isEmpty()){
            JOptionPane.showMessageDialog(this,"No hay reservas activas para ese huesped");
            jTdni.setText("");
            return;
            
        }
        for (reserva resdelhuesped:reservasHuesped){
            fechaEntradaFormateada=resdelhuesped.getFechaEntrada().format(formatoFecha);
            fechaSalidaFormateada=resdelhuesped.getFechaSalida().format(formatoFecha);
        
            formatoTablaReserva.addRow(new Object[]{resdelhuesped.getIdReserva(),resdelhuesped.getNrohabitacion().getNumero(),resdelhuesped.getNrohabitacion().getTipohabitacion().getTipo(),fechaEntradaFormateada,fechaSalidaFormateada,resdelhuesped.getImporteTotal()});
        }
        
        
            
        
        
        
    
    
        
        
        
        
        
    }//GEN-LAST:event_jBbuscarReservasActionPerformed

    private void jTablaReservasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaReservasMouseClicked
    //armo el objeto Reserva con los datos de la reserva elegida
    formatoTablaHabs.setRowCount(0);
    int filaSeleccionada=jTablaReservas.getSelectedRow();
    
    int idReserva=(int) (jTablaReservas.getValueAt(filaSeleccionada,0));
    reservaElegida=resData.buscarreservaxId(idReserva);
    
        
    //Completo el formulario
    
    int diaE=reservaElegida.getFechaEntrada().getDayOfMonth();
    int mesE=reservaElegida.getFechaEntrada().getMonthValue();
    int anoE=reservaElegida.getFechaEntrada().getYear();
    int diaS=reservaElegida.getFechaSalida().getDayOfMonth();
    int mesS=reservaElegida.getFechaSalida().getMonthValue();
    int anoS=reservaElegida.getFechaSalida().getYear();
    jTdiaE.setText(Integer.toString(diaE));
    jTmesE.setText(Integer.toString(mesE));
    jTanoE.setText(Integer.toString(anoE));
    jTdiaS.setText(Integer.toString(diaS));
    jTmesS.setText(Integer.toString(mesS));
    jTanoS.setText(Integer.toString(anoS));
          
    formatoTablaTipos.setNumRows(0);
    
    //Relleno la tabla con los tipos 
      
    ArrayList<tipodehabitacion> tiposdeH=new ArrayList<>();
    tiposdeH=tipohData.todoslostipos();
   
    for(tipodehabitacion tipo:tiposdeH){
        formatoTablaTipos.addRow(new Object[]{tipo.getCodigo(),tipo.getTipo(),tipo.getCapacidad(),tipo.getCantcamas(),tipo.getTipocamas(),tipo.getPrecio()});           
    }
        //hago que se selecciona el tipo de habitacion de esa reserva
        
        int filaTipo=(reservaElegida.getNrohabitacion().getTipohabitacion().getCodigo()-1);
        jTtiposHabitacion.setRowSelectionInterval(filaTipo,filaTipo);
        
        //traigo la habitacion de ese tipo, de esa reserva
        
        formatoTablaHabs.addRow(new Object[]{reservaElegida.getNrohabitacion().getNumero(),reservaElegida.getNrohabitacion().getTipohabitacion().getTipo(),reservaElegida.getNrohabitacion().getPiso()});
        precioTipoReserva=reservaElegida.getNrohabitacion().getTipohabitacion().getPrecio();
        jTimporte.setText(String.valueOf(reservaElegida.getImporteTotal()));
    
    
    
    
    
    
        
        
        
    }//GEN-LAST:event_jTablaReservasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jBbuscar;
    private javax.swing.JButton jBbuscarReservas;
    private javax.swing.JButton jBcancelarReserva;
    private javax.swing.JButton jBguardarCambiosReserva;
    private javax.swing.JButton jBvalidar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTablaReservas;
    private javax.swing.JTextField jTanoE;
    private javax.swing.JTextField jTanoS;
    private javax.swing.JTextField jTcantNoches;
    private javax.swing.JTextField jTcantPas;
    private javax.swing.JTextField jTdiaE;
    private javax.swing.JTextField jTdiaS;
    private javax.swing.JTextField jTdni;
    private javax.swing.JTable jThabitaciones;
    private javax.swing.JTextField jTimporte;
    private javax.swing.JTextField jTmesE;
    private javax.swing.JTextField jTmesS;
    private javax.swing.JTable jTtiposHabitacion;
    // End of variables declaration//GEN-END:variables
public void inicializarTablas(){
        //Tabla de tipos de habitaciones
        formatoTablaTipos.addColumn("Codigo");
        formatoTablaTipos.addColumn("Tipo de Habitacion");
        formatoTablaTipos.addColumn("Capacidad");
        formatoTablaTipos.addColumn("Cantidad de Camas");
        formatoTablaTipos.addColumn("Tipo de camas");
        formatoTablaTipos.addColumn("Precio por noche");
        
        //Tabla que muestra las reservas del huesped elegido
        
        formatoTablaReserva.addColumn("Codigo");
        formatoTablaReserva.addColumn("Habitacion");
        formatoTablaReserva.addColumn("Tipo de Habitacion");
        formatoTablaReserva.addColumn("Fecha Entrada");
        formatoTablaReserva.addColumn("Fecha Salida");
        formatoTablaReserva.addColumn("Importe Total");
        
        
        
        
        //Tabla que va a mostrar las habitaciones disponibles
        
        formatoTablaHabs.addColumn("Numero");
        formatoTablaHabs.addColumn("Tipo");
        formatoTablaHabs.addColumn("Piso");
                
        jTtiposHabitacion.setModel(formatoTablaTipos);
        jThabitaciones.setModel(formatoTablaHabs);
        jTablaReservas.setModel(formatoTablaReserva);
        
}
public void limpioform(){
    jTdiaE.setText("");
    jTmesE.setText("");
    jTanoE.setText("");
    jTdiaS.setText("");
    jTmesS.setText("");
    jTanoS.setText("");
    jTdni.setText("");
    jTcantNoches.setText("");
    jTcantPas.setText("");
    jTimporte.setText("");
    formatoTablaReserva.setRowCount(0);
    formatoTablaHabs.setRowCount(0);
    formatoTablaTipos.setRowCount(0);
    
            
    
    
    
    
    
    
    
}
private boolean verificoFechas(){
LocalDate fechaActual=LocalDate.now();
int diasEstadia=0;
        try{
            int diaE=Integer.parseInt(jTdiaE.getText());
            int mesE=Integer.parseInt(jTmesE.getText());
            int anoE=Integer.parseInt(jTanoE.getText());

            int diaS=Integer.parseInt(jTdiaS.getText());
            int mesS=Integer.parseInt(jTmesS.getText());
            int anoS=Integer.parseInt(jTanoS.getText());
            fechaIng= LocalDate.of(anoE, mesE, diaE);
            fechaSal= LocalDate.of(anoS,mesS, diaS);
            int validoInicio=(int) ChronoUnit.DAYS.between(fechaActual, fechaIng);
            if (validoInicio<0){
                int respuesta=JOptionPane.showConfirmDialog(this,"La fecha de ingreso en anterior a la fecha actual, prosigue? (Solo aceptar en caso de Extension o cambio de habitacion)", "AVISO", JOptionPane.YES_NO_OPTION );
                    if (respuesta==JOptionPane.NO_OPTION){
                        JOptionPane.showMessageDialog(this,"Verifique y modifique la fecha de Ingreso");
                        return false;
                        } else {
                        diasEstadia=(int) ChronoUnit.DAYS.between(fechaIng, fechaSal);
                        jTcantNoches.setText(String.valueOf(diasEstadia));
                        double monto=precioTipoReserva*diasEstadia;
                        System.out.println("Monto 2 "+monto);
                        jTimporte.setText(String.valueOf(monto));
                        return true;
                    }
                                     
                    
            }

            
            if (diasEstadia<0){
                JOptionPane.showMessageDialog(this,"La fecha de salida no puede ser anterior a la fecha de entrada");
                return false;
            }

            

        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Por favor, ingrese numeros validos para Dia, Mes, y Año");
        }
        catch(DateTimeParseException e){
            JOptionPane.showMessageDialog(this,"Por favor, ingrese valores válidos para Dia, Mes y Año");
        }
        catch(DateTimeException x){
            JOptionPane.showMessageDialog(this,"Por favor, ingrese valores válidos para Dia, Mes y Año");
        }
        diasEstadia=(int) ChronoUnit.DAYS.between(fechaIng, fechaSal);
        jTcantNoches.setText(String.valueOf(diasEstadia));
        double monto=precioTipoReserva*diasEstadia;
        System.out.println("Monto 2 "+monto);
        jTimporte.setText(String.valueOf(monto));
        return true;
    }   




}
